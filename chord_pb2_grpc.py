# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chord_pb2 as chord__pb2


class InnoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/InnoService/register',
                request_serializer=chord__pb2.RegisterRequest.SerializeToString,
                response_deserializer=chord__pb2.RegisterReply.FromString,
                )
        self.deregister = channel.unary_unary(
                '/InnoService/deregister',
                request_serializer=chord__pb2.DeregisterRequest.SerializeToString,
                response_deserializer=chord__pb2.DeregisterReply.FromString,
                )
        self.populateFingerTable = channel.unary_unary(
                '/InnoService/populateFingerTable',
                request_serializer=chord__pb2.PopulateFingerTableRequest.SerializeToString,
                response_deserializer=chord__pb2.PopulateFingerTableReply.FromString,
                )
        self.getChordInfo = channel.unary_unary(
                '/InnoService/getChordInfo',
                request_serializer=chord__pb2.getChordInfoRequest.SerializeToString,
                response_deserializer=chord__pb2.getChordInfoReply.FromString,
                )


class InnoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def populateFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getChordInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InnoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=chord__pb2.RegisterRequest.FromString,
                    response_serializer=chord__pb2.RegisterReply.SerializeToString,
            ),
            'deregister': grpc.unary_unary_rpc_method_handler(
                    servicer.deregister,
                    request_deserializer=chord__pb2.DeregisterRequest.FromString,
                    response_serializer=chord__pb2.DeregisterReply.SerializeToString,
            ),
            'populateFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.populateFingerTable,
                    request_deserializer=chord__pb2.PopulateFingerTableRequest.FromString,
                    response_serializer=chord__pb2.PopulateFingerTableReply.SerializeToString,
            ),
            'getChordInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getChordInfo,
                    request_deserializer=chord__pb2.getChordInfoRequest.FromString,
                    response_serializer=chord__pb2.getChordInfoReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InnoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InnoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InnoService/register',
            chord__pb2.RegisterRequest.SerializeToString,
            chord__pb2.RegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InnoService/deregister',
            chord__pb2.DeregisterRequest.SerializeToString,
            chord__pb2.DeregisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def populateFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InnoService/populateFingerTable',
            chord__pb2.PopulateFingerTableRequest.SerializeToString,
            chord__pb2.PopulateFingerTableReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getChordInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InnoService/getChordInfo',
            chord__pb2.getChordInfoRequest.SerializeToString,
            chord__pb2.getChordInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
